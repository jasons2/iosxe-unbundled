---

- name: IOSXE Upgrade Playbook
  hosts: cat9300s
  gather_facts: yes
  connection: network_cli

  # Ansible: 2.18.1
  # pip install pyats genie
  # ansible-galaxy install -r requirements.yml (https://github.com/CiscoDevNet/ansible-pyats)
  # Tested on Cat8500 and Cat9K

  # NOTE: You may need to increase copy image timeouts, please test manually before run this playbook 

  ## These variable can also be defined in a file or group or host vars.
  vars:
    flash_dir: 'flash:' # e.g: 'bootflash' or 'flash:'
    target_xe_ver: 17.12.04
    target_image: cat9k_iosxe.17.12.04.SPA.bin
    target_image_size: 1306917133
    target_image_md5: 1e3ab8c2357b33784373b626c190b907
    # target_xe_ver: 17.09.04a
    # target_image: cat9k_iosxe.17.09.04a.SPA.bin
    # target_image_size: 1251579379
    # target_image_md5: 16a20aa19ec9deb2abe421efddb75fae
    protocol: tftp
    tftp_server: 10.225.243.3
    vrf: mgmt-vrf
    install_check_mode: "no"

  ## Make sure you have the following role installed.
  roles:
    - ansible-pyats

  tasks:
    ## Prechecks
    - name: Start Prechecks Msg
      debug: msg="Starting pre-checks ..."
      tags: pre-check, install

    - name: Set the current time as a fact
      tags: backup, install
      set_fact: timestamp="{{ lookup('pipe','date \"+%Y-%m-%d-%H-%M\"') }}"

    ## Backup Device Configuration
    - name: Config Backup for {{ inventory_hostname }}
      tags: backup, install
      ios_config:
        backup: yes
        backup_options:
          filename: "{{ inventory_hostname }}_backup_{{ timestamp }}.cfg"
          dir_path: ./backup
      register: config_output

    ## Apply Workaround for CSCwk36412
    - name: Apply Workaround for CSCwk36412 - update ip ssh bulk-mode and tcp window-size
      tags: install, workaround
      cisco.ios.ios_config:
        lines:
          - 'event manager applet CSCwk36412_Workaround authorization bypass'
          - 'event syslog pattern "%SYS-5-RESTART:" maxrun 300'
          - 'action 005 wait 180'
          - 'action 015 cli command "enable"'
          - 'action 020 cli command "configure terminal"'
          - 'action 025 cli command "no ip ssh bulk-mode"'
          - 'action 030 cli command "ip tcp window-size 4128"'
          - 'action 035 cli command "end"'
          - 'action 040 cli command "wr"'
          - 'action 045 syslog msg "Changes Applied Successfully"'

    ## Check that Current IOSXE version is not target version with with PyATS
    - name: Get current IOSXE version
      tags: pre-check, check-version, post-check, install
      ios_command:
        commands: 
          - show version
      register: show_version_before

    - name: Set fact for the current IOSXE version with PyATS 
      tags: pre-check, check-version, post-check, install
      set_fact:
        xe_version_before: "{{ show_version_before['stdout'][0] | pyats_parser('show version', 'iosxe') }}"

    - name: Debug parsed output for the current IOSXE version
      debug:
        msg: "{{ inventory_hostname }} currently running with {{ xe_version_before.version.xe_version }}"

    - name: Assert that switch is NOT running with the target IOSXE version with PyATS
      tags: pre-check, check-version, install
      assert:
        quiet: no
        success_msg: "{{ inventory_hostname }} not running target version {{ target_xe_ver }}, current version is {{ xe_version_before.version.xe_version }}"
        fail_msg: "{{ inventory_hostname }} already running {{ target_xe_ver }} exiting"
        that:
          - xe_version_before.version is defined
          - xe_version_before.version.xe_version | default('') != target_xe_ver
      ignore_errors: yes

    ## Check the disk space using PyATS
    - name: Check if switch has the enough disk space for the  target image
      tags: pre-check, disk_check, image-check, image-copy, install
      ios_command:
        commands: dir
      register: disk_check

    - name: Set fact for the disk space with PyATS 
      tags: pre-check, disk_check, post-check, install
      set_fact:
        dsk_chk: "{{ disk_check['stdout'][0] | pyats_parser('dir', 'iosxe') }}"

    - debug: 
        msg: "{{ dsk_chk['dir'][flash_dir + '/']['bytes_free'] }}"

    - name: Assert Enough Disk Space Available
      tags: image-copy, install
      assert:
        quiet: no
        success_msg: 'Enough disk space available to accommodate target image.'
        fail_msg: 'Not enough disk space available for the target image!'
        that:
          - dsk_chk['dir'][flash_dir + '/']['bytes_free'] | int > target_image_size | int

    ## Check Target Image is Loaded and Verify
    ## Load from TFTP if not present
    - name: Check if switch has the target image in the {{ flash_dir }} directory 
      tags: pre-check, install, image-check, image-copy
      ios_command:
        commands: "dir {{ flash_dir }}" 
      register: image_check

    - name: Set image check as fact
      tags: pre-check, install, image-check, image-copy
      set_fact:
        dir_image_check: "{{ image_check.stdout[0] | regex_search(image_var, multiline=True) }}"
      vars: 
        image_var: "{{ target_image }}"

    - name: Copy IOSXE Image if does NOT exists in the {{ flash_dir }} dir
      block:
        - name: Assert {{ flash_dir }} does NOT contain target image before copy
          tags: image-copy, install
          assert:
            quiet: false
            success_msg: '{{ target_image }} NOT in {{ flash_dir }}'
            fail_msg: '{{ target_image }} was found in {{ flash_dir }}'
            that:
              - target_image != dir_image_check

          
        - name: Would you like to copy the IOSXE image via {{ protocol | upper }}?
          tags: image-copy, install
          pause:
            prompt: "Press enter to continue or cntrl-c + a to abort"

        - name: Copy IOSXE image file via TFTP 
          tags: image-copy, install
          ios_command:
            commands: 
              - command: "copy tftp://{{ tftp_server }}/{{ target_image }} flash:{{ target_image }}"
                check_all: True  
                prompt:
                  - "Destination filename [{{ target_image }}]?"
                answer:
                  - "\r"
            wait_for:
              - result[0] contains {{ target_image_size }} bytes copied
          vars:
            ansible_command_timeout: 1200
          no_log: false
          register: image_copy
          when: protocol == "tftp"

        - name: Target image MD5 File Validation
          tags: image-validate, install
          ios_command:
            commands:
              - verify /md5 {{ flash_dir }}{{ target_image }} {{ target_image_md5 }}
            wait_for:
              - result[0] contains Verified
          vars:
            ansible_command_timeout: 600
          register: image_validation_result

        - name: DEBUG OUTPUT FOR target image Validation
          tags: image-validate, install
          debug:
            msg: "{{ image_validation_result.stdout_lines }}"

      rescue:
        - name: Checks Status
          debug: msg='Some checks are failed, please review the output...'

    ## IOSXE Upgrade process starting
    - name: Change boot variable for Install Mode
      cisco.ios.ios_config:
        lines:
          - "no boot system"
          - "boot system flash:packages.conf"
          - "exit"

    - name: Install/Upgrade IOSXE Software
      block:
        - name: Saving configuration before upgrading 
          tags: install, upgrade
          ios_command:
            commands: 
              - command: 'copy run start'
                prompt: 'Destination filename'
                answer: "\r"
          register: config_save

        - name: Installing Target IOSXE {{ target_xe_ver }}
          tags: install, upgrade
          ios_command:
            commands:
              - command: 'install add file {{ flash_dir }}{{ target_image }}  activate commit prompt-level none'
          register: install_output
          vars:
            ansible_command_timeout: 1800

        - name: waiting for {{ inventory_hostname }} to come back online
          tags: install, upgrade
          wait_for_connection:
            delay: 60
            sleep: 30
            timeout: 900

      rescue:
        - name: Installation status check 
          tags: install, upgrade
          debug: msg='Upgrade process is having some trouble ...'

      always:
        - name: Print Install Results
          tags: install upgrade
          debug: var=install_output.stdout_lines

        ## Post Upgrade Tasks
        - name: Get current IOSXE version
          tags: pre-check, check-version, post-check, install
          ios_command:
            commands: 
              - show version
          register: show_version_after

        - name: Set fact for the current IOSXE version with PyATS 
          tags: check-version, post-check, install
          set_fact:
            xe_version_after: "{{ show_version_after['stdout'][0] | pyats_parser('show version', 'iosxe') }}"

        - name: Debug parsed output for the current IOSXE version
          debug:
            msg: "{{ inventory_hostname }} currently running with {{ xe_version_after.version.xe_version }}"

        - name: Assert that switch is running with the target IOSXE version {{ target_xe_ver }} After Upgrade
          tags: post-check, install, upgrade
          assert:
            quiet: no
            success_msg: "{{ inventory_hostname }} has been upgraded to {{ target_xe_ver }}"
            fail_msg: "Failed to upgrade the {{ inventory_hostname }}, it is still runninng {{ xe_version_before }}"
            that:
              - xe_version_after.version is defined
              - xe_version_after.version.xe_version | default('') == target_xe_ver

        # Device Clean Up
        - name: Do you want to clean up unnecessary packages ?
          tags: install, upgrade
          pause:
            prompt: "Press enter to continue or cntrl-c + a to abort"

        - name: Cleaning up unnecessary package files
          tags: install, cleanup, upgrade
          ios_command:
            commands:
              - command: install remove inactive
                prompt: Do you want to remove the above files?
                answer: 'y'
            wait_for:
              - result[0] contains SUCCESS
          register: cleanup_output
          vars:
            ansible_command_timeout: 300

        - name: Print Cleanup Results
          tags: install, cleanup, upgrade
          debug: var=cleanup_output.stdout_lines

        ## Display message for Upgrade process completed.
        - debug: msg="Upgrade completed."
          tags: pre-check, install, upgrade